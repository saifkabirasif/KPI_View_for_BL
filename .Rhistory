"Accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
)
response_post<-POST(login, body = params, add_headers(.headers = character()))
population <- response_post %>%
read_html() %>%
html_nodes(xpath='/html/body/table[2]/tbody/tr/td[2]/table/tbody/tr[2]/td[1]/table') %>%
html_table()
population<-as.data.frame(population)
return(population)
}
tradingCodes<-c('AAMRATECH'	,
'ABB1STMF'
)
all_Data<-NULL
#dummy_row<-c('a','b','c','d','e')
#all_Data<-rbind(all_Data,dummy_row)
#colnames(all_Data)<-c('a','b','c','d','e')
for (tc in tradingCodes)
{
Data_CMP<-DSE_Company_Price_Extractor(Trading_Code = tc,Start_Date = '2002-01-01',End_Date = '2016-11-16')
all_Data<-rbind(all_Data,Data_CMP)
#print(tc)
}
######## CleanUp  #########
library(sqldf)
colnames(all_Data)<-all_Data[1,]
#View(all_Data)
all_Data_Clean<-sqldf("Select * from all_Data where DATE!='DATE'")
# head(all_Data_Clean)
all_Data_Clean$`CLOSE PRICE`<-as.numeric(all_Data_Clean$`CLOSE PRICE`)
all_Data_Clean$DATE<-as.Date(all_Data_Clean$DATE)
colnames(all_Data_Clean)[3]<-'Trading_Code'
ui<-fluidPage(
# *Inputs
selectInput(inputId = "tradingCode",
label = "Trading Code",
choices = c("AAMRATECH",'ABB1STMF')
),
# *Outputs
plotOutput(outputId = "line")
)
server<-function(output,input){
#sapply(all_Data_Clean, typeof)
# Google Charts
library(googleVis)
vizData<-reactive({sqldf("select * from all_Data_Clean where Trading_Code='"+input$tradingCode+"'")})
output$line<-renderPlot(
{
p<-plot(x=vizData()$DATE,y=vizData()$`CLOSE PRICE`)
print (p)
}
)
}
shinyApp(ui=ui,server=server)
vizData
all_Data_Clean
ui<-fluidPage(
# *Inputs
selectInput(inputId = "tradingCode",
label = "Trading Code",
choices = c("AAMRATECH",'ABB1STMF')
),
# *Outputs
plotOutput(outputId = "line")
)
server<-function(output,input){
#sapply(all_Data_Clean, typeof)
# Google Charts
vizData<-reactive({sqldf("select * from all_Data_Clean where Trading_Code='"+ input$tradingCode +"'")})
output$line<-renderPlot(
{
p<-plot(x=vizData()$DATE,y=vizData()$`CLOSE PRICE`)
print (p)
}
)
}
shinyApp(ui=ui,server=server)
ui<-fluidPage(
# *Inputs
selectInput(inputId = "tradingCode",
label = "Trading Code",
choices = c("AAMRATECH",'ABB1STMF')
),
# *Outputs
plotOutput(outputId = "line")
)
server<-function(output,input){
#sapply(all_Data_Clean, typeof)
# Google Charts
vizData<-reactive(
{
sqldf(paste("select * from all_Data_Clean where Trading_Code='", input$tradingCode ,"'"))
}
)
output$line<-renderPlot(
{
p<-plot(x=vizData()$DATE,y=vizData()$`CLOSE PRICE`)
print (p)
}
)
}
shinyApp(ui=ui,server=server)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
all_Data_Clean
plot (all_Data_Clean$DATE,all_Data_Clean$`CLOSE PRICE`)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
sapply(vizData(), typeof)
vizData
sapply(all_Data_Clean, typeof)
sapply(all_Data_Clean, class)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
sqldf(paste("select * from all_Data_Clean where Trading_Code='", "AAMRATECH" ,"'"))
sqldf(paste("select * from all_Data_Clean where Trading_Code='", 'AAMRATECH' ,"'"))
paste("select * from all_Data_Clean where Trading_Code='", 'AAMRATECH' ,"'")
sqldf(paste("select * from all_Data_Clean where Trading_Code=", 'AAMRATECH' ,""))
paste("select * from all_Data_Clean where Trading_Code='", 'AAMRATECH' ,"'")
sqldf(paste("select * from all_Data_Clean where Trading_Code='", 'AAMRATECH' ,"'"))
sqldf("select * from all_Data_Clean where Trading_Code='AAMRATECH'")
sqldf(paste("select * from all_Data_Clean where Trading_Code='", 'AAMRATECH' ,"'"))
sqldf(paste("select * from all_Data_Clean where Trading_Code='",'AAMRATECH' ,"'"))
sqldf(paste("select * from all_Data_Clean where Trading_Code='","AAMRATECH" ,"'"))
sqldf(paste("select * from all_Data_Clean where Trading_Code='","AAMRATECH" ,"'""))
sqldf("select * from all_Data_Clean where Trading_Code='AAMRATECH'")
sqldf(paste("select * from all_Data_Clean where Trading_Code='","AAMRATECH" ,"'\""))
paste("select * from all_Data_Clean where Trading_Code='","AAMRATECH" ,"'\"")
sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
ui<-fluidPage(
# *Inputs
selectInput(inputId = "tradingCode",
label = "Trading Code",
choices = c('AAMRATECH','ABB1STMF')
),
# *Outputs
plotOutput(outputId = "line")
)
server<-function(output,input){
#sapply(all_Data_Clean, typeof)
# Google Charts
vizData<-reactive(
{
sqldf(paste("select * from all_Data_Clean where Trading_Code=",input$tradingCode ,"",sep=""))
}
)
output$line<-renderPlot(
{
plot(vizData()$DATE,vizData()$`CLOSE PRICE`)
}
)
}
shinyApp(ui=ui,server=server)
all_Data_Clean
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
paste("select * from all_Data_Clean where Trading_Code=",input$tradingCode ,"",sep="")
paste("select * from all_Data_Clean where Trading_Code=","AAMRATECH" ,"",sep="")
sqldf(paste("select * from all_Data_Clean where Trading_Code=","AAMRATECH" ,"",sep=""))
sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
ui<-fluidPage(
# *Inputs
selectInput(inputId = "tradingCode",
label = "Trading Code",
choices = c("AAMRATECH","ABB1STMF")
),
# *Outputs
plotOutput(outputId = "line")
)
server<-function(output,input){
#sapply(all_Data_Clean, typeof)
# Google Charts
vizData<-reactive(
{
sqldf(paste("select * from all_Data_Clean where Trading_Code='",input$tradingCode ,"'",sep=""))
}
)
output$line<-renderPlot(
{
plot(vizData()$DATE,vizData()$`CLOSE PRICE`)
}
)
}
shinyApp(ui=ui,server=server)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
library(googleVis)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
print(source('D:/Shiny/Tutorial/First/DSE_Shiny.R')$value)
s
sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
gvisLineChart(all_Data_Clean,all_Data_Clean$DATE,all_Data_Clean$`CLOSE PRICE`)
version
install.packages(googleVis)
install.packages("googleVis")
install.packages("googleVis")
install.packages("googleVis")
library(googleVis)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
a
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`,list(hAxis="{format:'M d y'}"))
gvisLineChart(a,as.character(a$DATE),a$`CLOSE PRICE`)
all_Data_Clean<-sqldf("Select * from all_Data where DATE!='DATE'")
library(sqldf)
all_Data_Clean<-sqldf("Select * from all_Data where DATE!='DATE'")
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
#getwd()
#setwd('D:\\Shiny\\Tutorial\\First')
library(shiny)
library(RCurl)
library(httr)
library(rvest)
library(htmltab)
#install.packages("htmltab")
#getwd()
#setwd('F:\\WinPython-32bit-2.7.10.3\\Flow\\Webscraping\\Quantifying_Memory')
### Function to do it all
DSE_Company_Price_Extractor<-function(Trading_Code,Start_Date,End_Date){
login<-"http://www.dsebd.org/dse_close_price_archive.php"
params<-list(
ClosePDate=Start_Date	,
ClosePDate_dp="1"	,
ClosePDate_year_start="2014"	,
ClosePDate_year_end="2016"	,
ClosePDate_da1=""	,
ClosePDate_da2=""	,
ClosePDate_sna="1"	,
ClosePDate_aut=""	,
ClosePDate_frm=""	,
ClosePDate_tar=""	,
ClosePDate_inp="1"	,
ClosePDate_fmt="j+F+Y"	,
ClosePDate_dis=""	,
ClosePDate_pr1=""	,
ClosePDate_pr2=""	,
ClosePDate_prv=""	,
ClosePDate_pth="calendar/"	,
ClosePDate_spd="[[],[],[]]"	,
ClosePDate_spt="0"	,
ClosePDate_och=""	,
ClosePDate_str="0"	,
ClosePDate_rtl=""	,
ClosePDate_wks=""	,
ClosePDate_int="1"	,
ClosePDate_hid="1"	,
ClosePDate_hdt="1000"	,
ClosePDate_day="04"	,
ClosePDate_month="11"	,
ClosePDate_year="2016"	,
ClosePDate1=End_Date	,
ClosePDate1_dp="1"	,
ClosePDate1_year_start="2014"	,
ClosePDate1_year_end="2016"	,
ClosePDate1_da1=""	,
ClosePDate1_da2=""	,
ClosePDate1_sna="1"	,
ClosePDate1_aut=""	,
ClosePDate1_frm=""	,
ClosePDate1_tar=""	,
ClosePDate1_inp="1"	,
ClosePDate1_fmt="j+F+Y"	,
ClosePDate1_dis=""	,
ClosePDate1_pr1=""	,
ClosePDate1_pr2=""	,
ClosePDate1_prv=""	,
ClosePDate1_pth="calendar/"	,
ClosePDate1_spd="[[],[],[]]"	,
ClosePDate1_spt="0"	,
ClosePDate1_och=""	,
ClosePDate1_str="0"	,
ClosePDate1_rtl=""	,
ClosePDate1_wks=""	,
ClosePDate1_int="1"	,
ClosePDate1_hid="1"	,
ClosePDate1_hdt="1000"	,
ClosePDate1_day="16"	,
ClosePDate1_month="11"	,
ClosePDate1_year="2016"	,
Symbol=Trading_Code	,
ViewClosePArchive="View+Close+Price"
)
headers <- list(
"User-Agent" = "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0",
"Referer" = "http://www.dsebd.org/data_archive.php",
"Host" = "www.dsebd.org",
"Connection" = "keep-alive",
"Content-Length" = "163649",
"Accept-Language" = "en-US,en;q=0.5",
"Accept-Encoding" = "gzip, deflate",
"Accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
)
response_post<-POST(login, body = params, add_headers(.headers = character()))
population <- response_post %>%
read_html() %>%
html_nodes(xpath='/html/body/table[2]/tbody/tr/td[2]/table/tbody/tr[2]/td[1]/table') %>%
html_table()
population<-as.data.frame(population)
return(population)
}
tradingCodes<-c('AAMRATECH'	,
'ABB1STMF'
)
all_Data<-NULL
#dummy_row<-c('a','b','c','d','e')
#all_Data<-rbind(all_Data,dummy_row)
#colnames(all_Data)<-c('a','b','c','d','e')
for (tc in tradingCodes)
{
Data_CMP<-DSE_Company_Price_Extractor(Trading_Code = tc,Start_Date = '2002-01-01',End_Date = '2016-11-16')
all_Data<-rbind(all_Data,Data_CMP)
#print(tc)
}
######## CleanUp  #########
library(sqldf)
colnames(all_Data)<-all_Data[1,]
#View(all_Data)
all_Data_Clean<-sqldf("Select * from all_Data where DATE!='DATE'")
all_Data_Clean$`CLOSE PRICE`<-as.numeric(all_Data_Clean$`CLOSE PRICE`)
all_Data_Clean$DATE<-as.Date(all_Data_Clean$DATE)
colnames(all_Data_Clean)[3]<-'Trading_Code'
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
a
gvisLineChart(a,as.character(a$DATE),a$`CLOSE PRICE`)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
all_Data_Clean<-sqldf("Select * from all_Data where DATE!='DATE'")
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
colnames(all_Data_Clean)[3]<-'Trading_Code'
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
a
head(a)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
p<-gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
a$DATE
head(a)
gvisLineChart(a,a$`SL NO`,a$`CLOSE PRICE`)
sapply(a, typeof)
all_Data_Clean$`CLOSE PRICE`<-as.numeric(all_Data_Clean$`CLOSE PRICE`)
a<-sqldf(paste("select * from all_Data_Clean where Trading_Code=","'AAMRATECH'" ,"",sep=""))
head(a)
gvisLineChart(a,a$DATE,a$`CLOSE PRICE`)
head(a)
gvisLineChart(a,xvar=a$DATE,yvar=a$`CLOSE PRICE`)
DATE
gvisLineChart(data = a,xvar=a$DATE,yvar=a$`CLOSE PRICE`)
getwd()
library(slidify)
setwd("F:\\WinPython-32bit-2.7.10.3\\Flow\\my_deck\\3G_Post_")
author("3G_KPI")
library(ggplot2)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
datafile<-read.csv("Data_RNC.csv",header=TRUE) # Change Million/thousands comma while importing indicator
datafile[,c(3:39)]<-sapply(datafile[,c(3:39)], as.double)
datafile$Date<-as.Date(datafile$Date,format="%d-%m-%Y")
datafile$RNC<-as.character(datafile$RNC)
library(ggplot2)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
M<-ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
print(M,file="assets/widgets/temp0.html") # Save Output as html
cat('<iframe src="./assets/widgets/temp0.html" width=100% height=125% allowtransparency="true"> </iframe>') # Embed Htmls
getwd()
setwd("F:\\WinPython-32bit-2.7.10.3\\Flow\\my_deck\\3G_Post_")
author("3G_KPI")
print(M,file="assets/widgets/temp0.html") # Save Output as html
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
M<
M<-ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
print(M,file="assets/widgets/temp0.html") # Save Output as html
labs(x="Date",y="HSDPA_Traffic_TB")+
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) + theme_grey(base_size = 12)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) + theme_grey(base_size = 12)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) +
theme_grey(base_size = 12)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) +
theme_grey(base_size = 20)
library(ggplot2)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) +
theme_grey(base_size = 200)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
theme(panel.grid=element_blank()) +
theme_grey(base_size = 10)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")+
ggsave('/assets/widgets/temp.png',width = 10,height = 5)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
ggsave('/assets/widgets/temp.png',width = 10,height = 5)
ggsave("/assets/widgets/temp.png"",width = 10,height = 5)
ggsave("/assets/widgets/temp.png",width = 10,height = 5)
ggplot(data=datafile,aes(x=Date,y=datafile$Traffic_HSDPA/1024/1024))+
geom_line(aes(color=RNC))+
ggtitle("HSDPA Traffic Volume (TB)")+
labs(x="Date",y="HSDPA_Traffic_TB")
print(M)
ggsave("/assets/widgets/temp.png",width = 10,height = 5)
slidify('index.rmd')
slidify('index.rmd')
slidify('index.rmd')
slidify('index.rmd')
M2<- gvisLineChart(data = df,xvar = "Date",
yvar = c("CRE04","CRE06"),
options=list(
title="HSDPA Traffic Volume(TB)",
haxis="{title: 'Date',
showTextEvery: 1,
slantedText:true
}",
vaxis="{title: 'HSDPA Traffic Volume(TB)'}",
legend="{positon: 'Right'
}",
curveType="function",
haxis="{format: 'M d Y'}",
explorer="{action:['dragToZoom','rightClickToReset'],
maxZoomIn: 0.05,
axis: 'horizontal',
keepInBounds: true}",
crosshair="{trigger:'both'}",
curvetype='fucntion',
backgroundColor="",
legend="{position:'top'}",
width=900, height=450
)
)
M2$html$foote
M2$html$jsfooter
M2$html$caption
plot(M2)
M2<- gvisLineChart(data = df,xvar = "Date",
yvar = c("CRE04","CRE06"),
options=list(
title="HSDPA Traffic Volume(TB)",
hAxis="{title: 'Date',
showTextEvery: 1,
slantedText:true
}",
vAxis="{title: 'HSDPA Traffic Volume(TB)'}",
legend="{positon: 'Right'
}",
curveType="function",
haxis="{format: 'M d Y'}",
explorer="{action:['dragToZoom','rightClickToReset'],
maxZoomIn: 0.05,
axis: 'horizontal',
keepInBounds: true}",
crosshair="{trigger:'both'}",
curvetype='fucntion',
backgroundColor="",
legend="{position:'top'}",
width=900, height=450
)
)
plot(M2)
slidify('index.rmd')
